module part2
#(parameter CLOCK_FREQUENCY = 50000000)(
input ClockIn,
input Reset,
input [1:0] Speed,
output [3:0] CounterValue
);

	wire enable;
    RateDivider #(.CLOCK_FREQUENCY(CLOCK_FREQUENCY)) RDInst ( .ClockIn(ClockIn), .Reset(Reset), .Speed(Speed), .Enable(enable));
	
	bitcounter4 BCInst (.clockBC(Clock), .reset(Reset), .enableDC(enable), .Q(CounterValue));
endmodule


module RateDivider
#(parameter CLOCK_FREQUENCY = 500) (
input ClockIn,
input Reset,
input [1:0] Speed,
output reg Enable
);

    reg [26:0] down_count;
    reg temp;

    always @ (*)
    begin
        case (Speed)
            2'b00 : temp = 1;
            2'b01 : temp = CLOCK_FREQUENCY;
            2'b10 : temp = CLOCK_FREQUENCY * 2;
            2'b11 : temp = CLOCK_FREQUENCY * 4;
            default : temp = CLOCK_FREQUENCY; 
        endcase
    end

    always @ (posedge ClockIn)
    begin
        if ((Reset == 1'b1) || (down_count == 27'd0))
            begin
                Enable = 1'b0; //start with enable = 1 or 0??
                down_count <= temp;
            end
        else
            begin
                Enable = 1'b0;
                down_count <= down_count - 1;
            end
    end
    assign enable = (down_count == 27'd0)? 1'b1:1'b0;
endmodule

module bitcounter4 (clockBC, reset, enableDC, Q);
    input clockBC, reset, enableDC;
    output reg [3:0] Q;

    always @ (posedge clockBC)
    begin   
        if (reset == 1'b1)
            Q <= 0;
        else if (enableDC == 1'b1)
            Q <= Q + 1;
        else if (Q == 4'b1111)
            Q <= 0;
    end
endmodule
